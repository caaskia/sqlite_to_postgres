import sqlite3
from dataclasses import asdict

import psycopg2
import pytest
from load_data import load_from_sqlite
from sqlite_utils import SQLiteExtractor
from postgres_utils import PostgresExtractor

@pytest.fixture(scope="module")
def sqlite_conn():
    # Установка соединения с SQLite
    conn = sqlite3.connect('../db.sqlite')
    yield conn
    conn.close()

@pytest.fixture(scope="module")
def pg_conn():
    # Установка соединения с PostgreSQL
    dsl = {'dbname': 'movies_database',
           'user': 'app',
           'password': '123qwe',
           'host': '127.0.0.1',
           'port': 5432}
    conn = psycopg2.connect(**dsl)
    yield conn
    conn.close()

def test_data_integrity(sqlite_conn, pg_conn):
    # Загрузка данных из SQLite в PostgreSQL
    load_from_sqlite(sqlite_conn, pg_conn)

    # Проверка целостности данных между таблицами
    with sqlite_conn, pg_conn:
        sqlite_extractor = SQLiteExtractor(sqlite_conn)
        postgres_extractor = PostgresExtractor(pg_conn)

        sqlite_table_names = ['genre', 'film_work', 'person', 'genre_film_work', 'person_film_work']

        for table_name in sqlite_table_names:
            # Получение количества записей из SQLite
            sqlite_count = sqlite_extractor.get_row_count(table_name)

            # Получение количества записей из PostgreSQL
            postgres_count = postgres_extractor.get_row_count(table_name)

            # Проверка целостности данных между таблицами
            assert sqlite_count == postgres_count, f"Integrity check failed for table {table_name}. " \
                                                    f"SQLite count: {sqlite_count}, PostgreSQL count: {postgres_count}"

            # Проверка содержимого записей внутри каждой таблицы
            sqlite_data = sqlite_extractor.extract_row_data(table_name)
            postgres_data = postgres_extractor.extract_row_data(table_name)

            # for sqlite_row, postgres_row in zip(sqlite_data, postgres_data):
            #     assert sqlite_row == postgres_row, f"Data mismatch for table {table_name}. " \
            #                                         f"SQLite row: {sqlite_row}, PostgreSQL row: {postgres_row}"

            for sqlite_row, postgres_row in zip(sqlite_data, postgres_data):
                # Преобразование объектов данных в словари и исключение полей 'created' и 'modified'
                sqlite_dict = {key: value for key, value in asdict(sqlite_row).items() if
                               key not in ['created', 'modified']}
                postgres_dict = {key: value for key, value in asdict(postgres_row).items() if
                                 key not in ['created', 'modified']}

                # Проверка равенства словарей
                assert sqlite_dict == postgres_dict, f"Data mismatch for table {table_name}. " \
                                                     f"SQLite row: {sqlite_dict}, PostgreSQL row: {postgres_dict}"
